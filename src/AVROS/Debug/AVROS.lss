
AVRASM ver. 2.1.43  E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm Wed Oct 02 17:29:21 2013

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Studio 5.0\avrassembler\include\m32def.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(19): Including file 'C:\Program Files (x86)\Atmel\AVR Studio 5.0\avrassembler\include\m32def.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(20): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\stdlib.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(21): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\process.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(22): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\lcd.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(23): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\adc.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(24): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\clock.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(25): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\serial.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(26): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\kernel.asm'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(27): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\pwm.inc'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(28): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\app1.asm'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(29): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\app2.asm'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(30): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\app3.asm'
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(31): Including file 'E:\Programming\AVR SIMPLE OS\src\AVROS\app4.asm'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                  * AVROS.asm
                  *
                  *  Created: 5/19/2013 8:47:33 AM
                  *   Author: Hamid & Omran
                  */ 
                  .org	0
000000 940c 077e  JMP	start
                 
                  .org	OVF0ADDR
000016 940c 0088  JMP	SwitchContext
                 
                    .org	OVF1ADDR
000012 940c 0392  JMP	Timer1_OVF
                 
                 
                  .org	0x30
000030 c74d        RJMP	start
                  .include	"m32def.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                  .include	"stdlib.inc"
                 
                  * stdlib.inc
                  *
                  *  Created: 5/19/2013 9:01:44 AM
                  *   Author: Omran Rezaee
                  */ 
                 .def		A=R16
                 .def		B=R17
                 .def		C=R18
                 .def		D=R19
                 .def		E=R20
                 .def		F=R21
                 .def		G=R22
                 .def		PL=R23
                 .def		PH=R24
                 .def		CurentPID=R25
                 
                 
                 ; You Can Lock Each Resource That Connected To AVR
                 .equ		LCD_LOCK		= 1;
                 .equ		ADC_LOCK		= 2;
                 
                 .equ		BAUD		= 9600
                 .equ		UBRR		= (1000000/BAUD)-1
                  .equ		ProcPIDS	=	0x60
                  .equ		ProcCount	=	0x65
                  .equ		PrevProcess  =   0x66
                  .equ		ProcessTSS  =   0x67
                  .equ		Second		= 0xA8
                  .equ		Minute		= 0xA9
                 .equ		Hour		= 0xAA
                 .equ		TCNTL		= 0xAB
                 .equ		TCNTH		= 0xAD
                 .equ		Lock		= 0xAC
                 .equ		Process		= 0xAE
                  .equ		RAMS		= 0xAF
                   .equ		RAMSA		= 0x100
                 
                  strcmp:
000031 2fa0      	MOV		XL,A
000032 2fb1      	MOV		XH,B
000033 914c      	LD		E,X
000034 2fa2      	MOV		XL,C
000035 2fb3      	MOV		XH,D
000036 915d      	LD		F,X+
000037 1745      	CP		E,F
000038 f451      	BRNE	NOTES
000039 3040      	CPI		E,0
00003a f051      	BREQ	SAMES
00003b 2f2a      	MOV		C,XL
00003c 2f3b      	MOV		D,XH
00003d 2fa0      	MOV		XL,A
00003e 2fb1      	MOV		XH,B
00003f 914d      	LD		E,X+
000040 2f0a      	MOV		A,XL
000041 2f1b      	MOV		B,XH
000042 cfee      	RJMP	strcmp
                 NOTES:
000043 9488      	CLC
000044 9508      	RET
                 SAMES:
000045 9408      	SEC
000046 9508       RET
                 
                 
                 
                 itoa:
000047 ef2f      	LDI		C,255
000048 932f      	PUSH	C
                 startti:
000049 e020      	LDI		C,0
00004a e030      	LDI		D,0
                 DIVN:
00004b 300a      	CPI		A,10
00004c f008      	BRLO	LBL
00004d c002      	RJMP	NOLT
                 LBL:
00004e 3010      	CPI		B,0
00004f f039      	BREQ	ENDD
                 NOLT:
000050 9523      	INC		C
000051 3020      	CPI		C,0
000052 f409      	BRNE	NOTOV
000053 9533      	INC		D
                 NOTOV:
000054 940e 0069 	CALL	DEC10
000056 cff4      	RJMP	DIVN
                 ENDD:
000057 930f      	PUSH	A
000058 2f02      	MOV		A,C
000059 2f13      	MOV		B,D
00005a 3000      	CPI		A,0
00005b f769      	BRNE	startti
00005c 3010      	CPI		B,0
00005d f009      	BREQ	ENDTT
00005e cfea      	RJMP	startti
                 ENDTT:
00005f 910f      	POP		A
000060 3f0f      	CPI		A,255
000061 f021      	BREQ	ENDCONVERT
000062 e310      	LDI		B,'0'
000063 0f01      	ADD		A,B
000064 930d      	ST		X+,A
000065 cff9      	RJMP	ENDTT
                 ENDCONVERT:
000066 e000      	LDI		A,0
000067 930d      	ST		X+,A
000068 9508      RET
                 
                 DEC10:
000069 e040      	LDI		E,0
                 SDEC:
00006a 9543      	INC		E
00006b 3000      	CPI		A,0
00006c f411      	BRNE	DECC
00006d 951a      	DEC		B
00006e e000      	LDI		A,0
                 DECC:
00006f 950a      	DEC		A
000070 304a      	CPI		E,10
000071 f7c1      	BRNE	SDEC
000072 9508      RET
                 
                 Wait_Unlock:
000073 9110 00ac 	LDS		B,Lock
000075 2310      	AND		B,A
000076 1710      	CP		B,A
000077 f3d9      	BREQ	Wait_Unlock
000078 9508      RET
                 
                 SetLock:
000079 940e 0073 	CALL	Wait_Unlock
00007b 9110 00ac 	LDS		B,Lock
00007d 2b10      	OR		B,A
00007e 9310 00ac 	STS		Lock,B
000080 9508      RET
                 
                 SetUnlock:
000081 9110 00ac 	LDS		B,Lock
000083 9500      	COM		A
000084 2310      	AND		B,A
000085 9310 00ac 	STS		Lock,B
                  .include	"process.inc"
000087 9508      
                  * process.inc
                  *
                  *  Created: 5/19/2013 9:00:33 AM
                  *   Author: Hamid Reza Mehrabian
                  *   A  V  R    M U L T I T A S K I N G
                  *   
                  */ 
                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                  ;;		   TSS Structure
                  ;;       _______________
                  ;;      |       A       |  1
                  ;;      |_______________|
                  ;;      |       B       |  2
                  ;;      |_______________|
                  ;;      |       C       |  3
                  ;;      |_______________|
                  ;;      |       D       |  4
                  ;;      |_______________|
                  ;;      |       E       |  5
                  ;;      |_______________|
                  ;;      |       F       |  6
                  ;;      |_______________|
                  ;;      |     FLAGS     |  7
                  ;;      |_______________|
                  ;;      |               |  8
                  ;;      |  Instruction  |
                  ;;      |    Pointer    |  9
                  ;;      |_______________|
                  ;;      |               |  10
                  ;;      | Stack Pointer |
                  ;;      |               |  11
                  ;;      |_______________|
                  ;;      |   X Pointer   |  12
                  ;;      |               | 
                  ;;      |_______________|  13
                 
                 
                 
                 
                 
                 
                 
                  SwitchContext:
000088 916f      	POP		G
000089 2fd6      	MOV		YH,G
00008a 916f      	POP		G
00008b 2fc6      	MOV		YL,G
00008c b76f      	IN		G,SREG
00008d 940e 0124 	CALL	SaveABCDY
                 NextPID:
00008f 2fa9      	MOV		XL,CurentPID
000090 e0b0      	LDI		XH,0
000091 e610      	LDI		B,LOW(ProcPIDS)
000092 0fa1      	ADD		XL,B
000093 e010      	LDI		B,HIGH(ProcPIDS)
000094 1fb1      	ADC		XH,B
000095 910d      	LD		A,X+
000096 2300      	TST		A
000097 f441      	BRNE	VALIDPID
000098 9593      	INC		CurentPID
000099 3095      	CPI		CurentPID,5
00009a f7a1      	BRNE	NextPID
00009b e090      	LDI		CurentPID,0
00009c e000      	LDI		A,0
00009d bf02      	OUT		TCNT0,A
00009e e090      	LDI		CurentPID,0
00009f cfef      	RJMP	NextPID
                 VALIDPID:
0000a0 940e 0108 	CALL	LoadABCDY
0000a2 bfed      	OUT		SPL,ZL
0000a3 bffe      	OUT		SPH,ZH
0000a4 2fec      	MOV		ZL,YL
0000a5 2ffd      	MOV		ZH,YH
0000a6 9390 0066 	STS		PrevProcess,CurentPID
0000a8 9593      	INC		CurentPID
0000a9 3095      	CPI		CurentPID,5
0000aa f409      	BRNE	POF
0000ab e090      	LDI		CurentPID,0
                 POF:
0000ac bf6f      	OUT		SREG,G
0000ad 9478      	SEI
0000ae 9409      	IJMP
                 
                 
                 
                 
                 
                 
                  KillProc:
0000af 94f8      	CLI
                 	;DEC		A
0000b0 e030      	LDI		D,0
0000b1 e6a0      	LDI		XL,LOW(ProcPIDS)
0000b2 e0b0      	LDI		XH,HIGH(ProcPIDS)
0000b3 912d      	LD		C,X+
                 NPID:
0000b4 912d      	LD		C,X+
0000b5 1720      	CP		C,A
0000b6 f021      	BREQ	TF
0000b7 9533      	INC		D
0000b8 3034      	CPI		D,4
0000b9 f089      	BREQ	INVPID
0000ba cff9      	RJMP	NPID
                 TF:
0000bb e000      	LDI		A,0
0000bc 930e      	ST		-X,A
0000bd e001      	LDI		A,LCD_LOCK
0000be 940e 0081 	CALL	SetUnlock
0000c0 e002      	LDI		A,ADC_LOCK
0000c1 940e 0081 	CALL	SetUnlock
0000c3 9110 0065  	LDS		B,ProcCount
0000c5 951a      	DEC		B
0000c6 9310 0065 	STS		ProcCount,B
0000c8 9478      	SEI
0000c9 9408      	SEC
0000ca 9508      	RET
                 INVPID:
0000cb 9488      	CLC
0000cc e001      	LDI		A,LCD_LOCK
0000cd 940e 0081 	CALL	SetUnlock
0000cf e002      	LDI		A,ADC_LOCK
0000d0 940e 0081 	CALL	SetUnlock
0000d2 9508       RET
                 
                  ;;		Input  : Z => Process Address
                  ;;		Output : C => PID , Carry => 1 Successfully
                  InitProc:
0000d3 94f8      	CLI
0000d4 9100 0065 	LDS		A,ProcCount
0000d6 3005      	CPI		A,5
0000d7 f171      	BREQ	QueueFull
0000d8 9503      	INC		A
0000d9 9300 0065 	STS		ProcCount,A
0000db e030      	LDI		D,0
0000dc e6a0      	LDI		XL,LOW(ProcPIDS)
0000dd e0b0      	LDI		XH,HIGH(ProcPIDS)
                 NPIDS:	
0000de 9533      	INC		D
0000df 910d      	LD		A,X+
0000e0 2300      	TST		A
0000e1 f019      	BREQ	FPID
0000e2 3035      	CPI		D,5
0000e3 f7d1      	BRNE	NPIDS
0000e4 c021      	RJMP	QueueFull
                 FPID:
0000e5 953a      	DEC		D
0000e6 931e      	ST		-X,B
0000e7 2f23      	MOV		C,D
0000e8 e01d      	LDI		B,13
0000e9 9f31      	MUL		D,B
0000ea 2da0      	MOV		XL,R0
0000eb 2db1      	MOV		XH,R1
0000ec e617      	LDI		B,LOW(ProcessTSS)
0000ed 0fa1      	ADD		XL,B
0000ee e010      	LDI		B,HIGH(ProcessTSS)
0000ef 1fb1      	ADC		XH,B
0000f0 e000      	LDI		A,0
0000f1 930d      	ST		X+,A
0000f2 930d      	ST		X+,A
0000f3 930d      	ST		X+,A
0000f4 930d      	ST		X+,A
0000f5 930d      	ST		X+,A
0000f6 930d      	ST		X+,A
0000f7 930d      	ST		X+,A
0000f8 93ed      	ST		X+,ZL
0000f9 93fd      	ST		X+ ,ZH
0000fa e400      	LDI		A,64
0000fb 9f20      	MUL		C,A
0000fc 2de0      	MOV		ZL,R0
0000fd 2df1      	MOV		ZH,R1
0000fe e10f      	LDI		A,0x1F
0000ff 0fe0      	ADD		ZL,A
000100 e003      	LDI		A,0x3
000101 1ff0      	ADC		ZH,A
000102 93ed      	ST		X+,ZL
000103 93fd      	ST		X+ ,ZH
000104 9408      	SEC
000105 9508      	RET
                 QueueFull:
000106 9488      	CLC
000107 9508       RET
                 
                 
                  LoadABCDY:
000108 e00d      	LDI		A,13
000109 9f09      	MUL		A,CurentPID
00010a 2da0      	MOV		XL,R0
00010b 2db1      	MOV		XH,R1
00010c e617      	LDI		B,LOW(ProcessTSS)
00010d 0fa1      	ADD		XL,B
00010e e010      	LDI		B,HIGH(ProcessTSS)
00010f 1fb1      	ADC		XH,B
000110 b7cf      	IN		YL,SREG
000111 78c0      	ANDI	YL,1<<7
000112 910d      	LD		A,X+
000113 911d      	LD		B,X+
000114 912d      	LD		C,X+
000115 913d      	LD		D,X+
000116 914d      	LD		E,X+
000117 915d      	LD		F,X+
000118 916d      	LD		G,X+
000119 776f      	ANDI	G,0x7F
00011a 2b6c      	OR		G,YL
00011b 91cd      	LD		YL,X+
00011c 91dd      	LD		YH,X+
00011d 91ed      	LD		ZL,X+
00011e 91fd      	LD		ZH,X+
00011f 917d      	LD		PL,X+
000120 918d      	LD		PH,X+
000121 2fa7      	MOV		XL,PL
000122 2fb8      	MOV		XH,PH
000123 9508       RET
                 
                   SaveABCDY:
000124 2f7a      	MOV		PL,XL
000125 2f8b      	MOV		PH,XH
000126 930f      	PUSH	A
000127 931f      	PUSH	B
000128 939f      	PUSH	CurentPID
000129 e00d      	LDI		A,13
00012a 9190 0066 	LDS		CurentPID,PrevProcess
00012c 9f09      	MUL		A,CurentPID
00012d 2da0      	MOV		XL,R0
00012e 2db1      	MOV		XH,R1
00012f e617      	LDI		B, LOW(ProcessTSS)
000130 0fa1      	ADD		XL,B
000131 e010      	LDI		B,HIGH(ProcessTSS)
000132 1fb1      	ADC		XH,B
000133 919f      	POP		CurentPID
000134 911f      	POP		B
000135 910f      	POP		A
000136 930d      	ST		X+,A
000137 931d      	ST		X+,B
000138 932d      	ST		X+,C
000139 933d      	ST		X+,D
00013a 934d      	ST		X+,E
00013b 935d      	ST		X+,F
00013c 936d      	ST		X+,G
00013d 93cd      	ST		X+,YL
00013e 93dd      	ST		X+,YH
00013f b7cd      	IN		YL,SPL
000140 b7de      	IN		YH,SPH
000141 e002      	LDI		A,2
000142 0fc0      	ADD		YL,A
000143 e000      	LDI		A,0
000144 1fd0      	ADC		YH,A
000145 93cd      	ST		X+,YL
000146 93dd      	ST		X+,YH
000147 937d      	ST		X+,PL
000148 938d      	ST		X+,PH
                  .include	"lcd.inc"
000149 9508      
                  * lcd.inc
                  *
                  *  Created: 5/19/2013 11:42:10 AM
                  *   Author: Hamid Reza Mehrabian
                  */ 
                  .EQU	LCD_PORT = PORTC
                 .EQU	LCD_PORT_IN = PINC
                 .EQU	DDRLCD = DDRC
                 .EQU	LCD_RS	 = 0
                 .EQU	LCD_RW	 = 1
                 .EQU	LCD_EN	 = 2
                 
                 .MACRO	LDELAY	; LDELAY time ~= (high(a)+8)*8*(low(a)+2)/freq ; for example for have 1s LDELAY on 8MHz , we need to 8 time call this macro , 7->0xFFFF 1->0xFFAC.
                 	PUSH	C
                 	PUSH	D
                 	PUSH	A
                 	LDI		C,LOW(@0)
                 	LDI		D,HIGH(@0)
                 	CPI		D,0
                 	BRNE	LDELAY_start
                 	INC		D
                 LDELAY_start:
                 	MOV		A,D
                 loop1:
                 	DEC		C
                 	MOV		D,A
                 loop2:
                 	DEC		D
                 	NOP
                 	NOP
                 	NOP
                 	NOP
                 	NOP
                 	BRNE	loop2
                 	TST		C
                 	BRNE	loop1
                 	POP		A
                 	POP		D
                 	POP		C
                 .ENDMACRO
                 
                 LCD_PUTF:
00014a 930f      	PUSH	A
00014b 931f      	PUSH	B
00014c 93ff      	PUSH	ZH
00014d 93ef      	PUSH	ZL
00014e e010      	LDI		B,0
                 LCD_NCF:
00014f 9513      	INC		B
000150 9105      	LPM		A,Z+
000151 2300      	TST		A
000152 f061      	BREQ	END_PLF
000153 3100      	CPI		A,0x10
000154 f419      	BRNE	NOT_NLF
000155 d1fa      	RCALL	LCD_L2
000156 940c 015d 	JMP		IS_NLF
                 NOT_NLF:
000158 3111      	CPI		B,0x11
000159 f411      	BRNE	IS_NL0F
00015a e010      	LDI		B,0
00015b d1f4      	RCALL	LCD_L2
                 IS_NL0F:
00015c d211      	RCALL	LCD_PUTC
                 IS_NLF:	
00015d 940c 014f 	JMP		LCD_NCF
                 END_PLF:
00015f 91ef      	POP		ZL
000160 91ff      	POP		ZH
000161 911f      	POP		B
000162 910f      	POP		A
000163 9508      RET
                 
                 LCD_PUTS:
000164 930f      	PUSH	A
000165 931f      	PUSH	B
000166 e010      	LDI		B,0
                 LCD_NCS:
000167 9513      	INC		B
000168 910d      	LD		A,X+
000169 2300      	TST		A
00016a f019      	BREQ	END_PLS
00016b d202      	RCALL	LCD_PUTC
00016c 940c 0167 	JMP		LCD_NCS
                 END_PLS:
00016e 911f      	POP		B
00016f 910f      	POP		A
000170 9508      RET
                 
                 LCD_INIT:
000171 932f
000172 933f
000173 930f
000174 ef2f
000175 ee3f
000176 3030
000177 f409
000178 9533
000179 2f03
00017a 952a
00017b 2f30
00017c 953a
00017d 0000
00017e 0000
00017f 0000
000180 0000
000181 0000
000182 f7c9
000183 2322
000184 f7a9
000185 910f
000186 913f
000187 912f      	LDELAY   0xEFFF
000188 e300      	LDI		A,0x30
000189 bb05      	OUT     LCD_PORT,A
00018a 932f
00018b 933f
00018c 930f
00018d ef2f
00018e ee3f
00018f 3030
000190 f409
000191 9533
000192 2f03
000193 952a
000194 2f30
000195 953a
000196 0000
000197 0000
000198 0000
000199 0000
00019a 0000
00019b f7c9
00019c 2322
00019d f7a9
00019e 910f
00019f 913f
0001a0 912f      	LDELAY   0xEFFF
                 
0001a1 98a8         CBI      LCD_PORT,LCD_RS 
0001a2 98a9         CBI      LCD_PORT,LCD_RW 
0001a3 98aa         CBI      LCD_PORT,LCD_EN 
0001a4 932f
0001a5 933f
0001a6 930f
0001a7 ef2f
0001a8 e032
0001a9 3030
0001aa f409
0001ab 9533
0001ac 2f03
0001ad 952a
0001ae 2f30
0001af 953a
0001b0 0000
0001b1 0000
0001b2 0000
0001b3 0000
0001b4 0000
0001b5 f7c9
0001b6 2322
0001b7 f7a9
0001b8 910f
0001b9 913f
0001ba 912f         LDELAY   0x02FF   ; wait 4 us
0001bb e200         LDI      A,0x20  ; set 4-bit mode
0001bc bb05         OUT      LCD_PORT,A 
0001bd 9aaa         SBI      LCD_PORT,LCD_EN 
0001be 932f
0001bf 933f
0001c0 930f
0001c1 ef2f
0001c2 e535
0001c3 3030
0001c4 f409
0001c5 9533
0001c6 2f03
0001c7 952a
0001c8 2f30
0001c9 953a
0001ca 0000
0001cb 0000
0001cc 0000
0001cd 0000
0001ce 0000
0001cf f7c9
0001d0 2322
0001d1 f7a9
0001d2 910f
0001d3 913f
0001d4 912f         LDELAY   0x55FF 
0001d5 98aa         CBI      LCD_PORT,LCD_EN 
0001d6 e000         LDI      A,0 
0001d7 bb05         OUT      LCD_PORT,A  ; clear data pins
0001d8 e208         LDI      A,0x28  ; entry mode set
0001d9 d094         RCALL   LCD_SEND_COMMAND
0001da e00e         LDI      A,0x0E  ; entry mode set
0001db d092         RCALL   LCD_SEND_COMMAND 
0001dc e001         LDI      A,0x01  ; clear LCD
0001dd d090         RCALL   LCD_SEND_COMMAND 
0001de e006         LDI      A,0x06  ; turns on LCD
0001df d08e         RCALL   LCD_SEND_COMMAND 
0001e0 9508         RET 
                 
                 LCD_SEND_DATA:
0001e1 931f      	PUSH	B
0001e2 932f      	PUSH	C
0001e3 933f      	PUSH	D
0001e4 2f20      	MOV		C,A
0001e5 2f30      	MOV		D,A
0001e6 7f20      	ANDI	C,0xF0
0001e7 703f      	ANDI	D,0x0F
0001e8 98a8      	CBI		LCD_PORT,LCD_RS
0001e9 98a9      	CBI		LCD_PORT,LCD_RW
0001ea 98aa      	CBI		LCD_PORT,LCD_EN
0001eb 932f
0001ec 933f
0001ed 930f
0001ee e123
0001ef e138
0001f0 3030
0001f1 f409
0001f2 9533
0001f3 2f03
0001f4 952a
0001f5 2f30
0001f6 953a
0001f7 0000
0001f8 0000
0001f9 0000
0001fa 0000
0001fb 0000
0001fc f7c9
0001fd 2322
0001fe f7a9
0001ff 910f
000200 913f
000201 912f      	LDELAY	0x1813
000202 9aa8      	SBI		LCD_PORT,LCD_RS
000203 932f
000204 933f
000205 930f
000206 e123
000207 e138
000208 3030
000209 f409
00020a 9533
00020b 2f03
00020c 952a
00020d 2f30
00020e 953a
00020f 0000
000210 0000
000211 0000
000212 0000
000213 0000
000214 f7c9
000215 2322
000216 f7a9
000217 910f
000218 913f
000219 912f      	LDELAY	0x1813
00021a 6021      	ORI		C,1<<LCD_RS
00021b bb25      	OUT		LCD_PORT,C
00021c 9aaa      	SBI		LCD_PORT,LCD_EN
00021d 932f
00021e 933f
00021f 930f
000220 e123
000221 e138
000222 3030
000223 f409
000224 9533
000225 2f03
000226 952a
000227 2f30
000228 953a
000229 0000
00022a 0000
00022b 0000
00022c 0000
00022d 0000
00022e f7c9
00022f 2322
000230 f7a9
000231 910f
000232 913f
000233 912f      	LDELAY	0x1813
000234 98aa      	CBI		LCD_PORT,LCD_EN
000235 932f
000236 933f
000237 930f
000238 e123
000239 e138
00023a 3030
00023b f409
00023c 9533
00023d 2f03
00023e 952a
00023f 2f30
000240 953a
000241 0000
000242 0000
000243 0000
000244 0000
000245 0000
000246 f7c9
000247 2322
000248 f7a9
000249 910f
00024a 913f
00024b 912f      	LDELAY	0x1813
00024c 9532      	SWAP	D
00024d 6031      	ORI		D,1<<LCD_RS
00024e bb35      	OUT		LCD_PORT,D
00024f 9aaa      	SBI		LCD_PORT,LCD_EN
000250 932f
000251 933f
000252 930f
000253 e123
000254 e138
000255 3030
000256 f409
000257 9533
000258 2f03
000259 952a
00025a 2f30
00025b 953a
00025c 0000
00025d 0000
00025e 0000
00025f 0000
000260 0000
000261 f7c9
000262 2322
000263 f7a9
000264 910f
000265 913f
000266 912f      	LDELAY	0x1813
000267 98aa      	CBI		LCD_PORT,LCD_EN
000268 e010      	LDI		B,0
000269 bb15      	OUT		LCD_PORT,B
00026a 913f      	POP		D
00026b 912f      	POP		C
00026c 911f      	POP		B
00026d 9508      	RET
                 
                 LCD_SEND_COMMAND:
00026e 931f      	PUSH	B
00026f 932f      	PUSH	C
000270 933f      	PUSH	D
000271 2f20      	MOV		C,A
000272 2f30      	MOV		D,A
000273 7f20      	ANDI	C,0xF0
000274 703f      	ANDI	D,0x0F
000275 98a8      	CBI		LCD_PORT,LCD_RS
000276 98a9      	CBI		LCD_PORT,LCD_RW
000277 98aa      	CBI		LCD_PORT,LCD_EN
000278 bb25      	OUT		LCD_PORT,C
000279 9aaa      	SBI		LCD_PORT,LCD_EN
00027a 932f
00027b 933f
00027c 930f
00027d e123
00027e e138
00027f 3030
000280 f409
000281 9533
000282 2f03
000283 952a
000284 2f30
000285 953a
000286 0000
000287 0000
000288 0000
000289 0000
00028a 0000
00028b f7c9
00028c 2322
00028d f7a9
00028e 910f
00028f 913f
000290 912f      	LDELAY	0x1813
000291 98aa      	CBI		LCD_PORT,LCD_EN
000292 9532      	SWAP	D
000293 bb35      	OUT		LCD_PORT,D
000294 9aaa      	SBI		LCD_PORT,LCD_EN
000295 932f
000296 933f
000297 930f
000298 e123
000299 e138
00029a 3030
00029b f409
00029c 9533
00029d 2f03
00029e 952a
00029f 2f30
0002a0 953a
0002a1 0000
0002a2 0000
0002a3 0000
0002a4 0000
0002a5 0000
0002a6 f7c9
0002a7 2322
0002a8 f7a9
0002a9 910f
0002aa 913f
0002ab 912f      	LDELAY	0x1813
0002ac 98aa      	CBI		LCD_PORT,LCD_EN
0002ad e010      	LDI		B,0
0002ae bb15      	OUT		LCD_PORT,B
0002af 913f      	POP		D
0002b0 912f      	POP		C
0002b1 911f      	POP		B
0002b2 9508      	RET
                 
                 LCD_READ:
0002b3 931f      	PUSH	B
0002b4 e00f      	LDI		A,0x0F
0002b5 bb04      	OUT		DDRLCD,A
0002b6 98a8      	CBI		LCD_PORT,LCD_RS
0002b7 98aa      	CBI		LCD_PORT,LCD_EN
0002b8 98a9      	CBI		LCD_PORT,LCD_RW
0002b9 932f
0002ba 933f
0002bb 930f
0002bc e123
0002bd e138
0002be 3030
0002bf f409
0002c0 9533
0002c1 2f03
0002c2 952a
0002c3 2f30
0002c4 953a
0002c5 0000
0002c6 0000
0002c7 0000
0002c8 0000
0002c9 0000
0002ca f7c9
0002cb 2322
0002cc f7a9
0002cd 910f
0002ce 913f
0002cf 912f      	LDELAY	0x1813
0002d0 9aa9      	SBI		LCD_PORT,LCD_RW
0002d1 9aaa      	SBI		LCD_PORT,LCD_EN
0002d2 932f
0002d3 933f
0002d4 930f
0002d5 e123
0002d6 e138
0002d7 3030
0002d8 f409
0002d9 9533
0002da 2f03
0002db 952a
0002dc 2f30
0002dd 953a
0002de 0000
0002df 0000
0002e0 0000
0002e1 0000
0002e2 0000
0002e3 f7c9
0002e4 2322
0002e5 f7a9
0002e6 910f
0002e7 913f
0002e8 912f      	LDELAY	0x1813
0002e9 b303      	IN		A,LCD_PORT_IN
0002ea 98aa      	CBI		LCD_PORT,LCD_EN
0002eb 932f
0002ec 933f
0002ed 930f
0002ee e123
0002ef e138
0002f0 3030
0002f1 f409
0002f2 9533
0002f3 2f03
0002f4 952a
0002f5 2f30
0002f6 953a
0002f7 0000
0002f8 0000
0002f9 0000
0002fa 0000
0002fb 0000
0002fc f7c9
0002fd 2322
0002fe f7a9
0002ff 910f
000300 913f
000301 912f      	LDELAY	0x1813
000302 9aaa      	SBI		LCD_PORT,LCD_EN
000303 932f
000304 933f
000305 930f
000306 e123
000307 e138
000308 3030
000309 f409
00030a 9533
00030b 2f03
00030c 952a
00030d 2f30
00030e 953a
00030f 0000
000310 0000
000311 0000
000312 0000
000313 0000
000314 f7c9
000315 2322
000316 f7a9
000317 910f
000318 913f
000319 912f      	LDELAY	0x1813
00031a b313      	IN		B,LCD_PORT_IN
00031b 98aa      	CBI		LCD_PORT,LCD_EN
00031c 98a9      	CBI		LCD_PORT,LCD_RW
00031d 932f
00031e 933f
00031f 930f
000320 e123
000321 e138
000322 3030
000323 f409
000324 9533
000325 2f03
000326 952a
000327 2f30
000328 953a
000329 0000
00032a 0000
00032b 0000
00032c 0000
00032d 0000
00032e f7c9
00032f 2322
000330 f7a9
000331 910f
000332 913f
000333 912f      	LDELAY	0x1813
000334 7f00      	ANDI	A,0xF0
000335 701f      	ANDI	B,0x0F
000336 2b01      	OR		A,B
000337 ef1f      	LDI		B,0xFF
000338 bb14      	OUT		DDRLCD,B
000339 911f      	POP		B
00033a 9508      	RET
                 
                 LCD_WAIT:
00033b 930f      	PUSH	A
                 LCD_WAITAA:
00033c df76      	RCALL	LCD_READ
00033d 7800      	ANDI	A,0B10000000
00033e 3800      	CPI		A,0B10000000
00033f f3e1      	BREQ	LCD_WAITAA
000340 910f      	POP		A
000341 9508      	RET
                 
                 LCD_HOME:
000342 930f      	PUSH	A
000343 e800      	LDI		A,0x80
000344 df29      	RCALL	LCD_SEND_COMMAND
000345 dff5      	RCALL	LCD_WAIT
000346 910f      	POP		A
000347 9508      	RET
                 
                 LCD_CLS:
000348 930f      	PUSH	A
000349 e001      	LDI		A,0x01
00034a 940e 026e 	CALL	LCD_SEND_COMMAND
00034c 940e 033b 	CALL	LCD_WAIT
00034e 910f      	POP		A
00034f 9508      	RET
                 
                 LCD_L2:
000350 930f      	PUSH	A
000351 ec00      	LDI		A,0xC0
000352 df1b      	RCALL	LCD_SEND_COMMAND
000353 dfe7      	RCALL	LCD_WAIT
000354 910f      	POP		A
000355 9508      	RET
                 
                 LCD_CSL:
000356 930f      	PUSH	A
000357 e100      	LDI		A,0x10
000358 df15      	RCALL	LCD_SEND_COMMAND
000359 dfe1      	RCALL	LCD_WAIT
00035a 910f      	POP		A
00035b 9508      	RET
                 
                 LCD_CSR:
00035c 930f      	PUSH	A
00035d e104      	LDI		A,0x14
00035e df0f      	RCALL	LCD_SEND_COMMAND
00035f dfdb      	RCALL	LCD_WAIT
000360 910f      	POP		A
000361 9508      	RET
                 
                 LCD_TSR:
000362 930f      	PUSH	A
000363 e10c      	LDI		A,0x1C
000364 df09      	RCALL	LCD_SEND_COMMAND
000365 dfd5      	RCALL	LCD_WAIT
000366 910f      	POP		A
000367 9508      	RET
                 
                 LCD_TSL:
000368 930f      	PUSH	A
000369 e108      	LDI		A,0x18
00036a df03      	RCALL	LCD_SEND_COMMAND
00036b dfcf      	RCALL	LCD_WAIT
00036c 910f      	POP		A
00036d 9508      	RET
                 
                 LCD_PUTC:
00036e de72      	RCALL	LCD_SEND_DATA
00036f dfcb      	RCALL	LCD_WAIT
000370 9508      	RET
                  .include	"adc.inc"
                 
                  * adc.inc
                  *
                  *  Created: 5/19/2013 10:56:29 PM
                  *   Author: Omran Rezaee
                  */ 
                 GetADC:
000371 b106      	IN		A,ADCSRA
000372 6400      	ORI		A,1<<6
000373 b906      	OUT		ADCSRA,A
000374 932f
000375 933f
000376 930f
000377 e020
000378 e031
000379 3030
00037a f409
00037b 9533
00037c 2f03
00037d 952a
00037e 2f30
00037f 953a
000380 0000
000381 0000
000382 0000
000383 0000
000384 0000
000385 f7c9
000386 2322
000387 f7a9
000388 910f
000389 913f
00038a 912f      	LDELAY	0x100
00038b 9508      RET
                 
                 InitADC:
00038c 7007      	ANDI	A,0x07
00038d 6c00      	ORI		A,1<<7 | 1<<6
00038e b907      	OUT		ADMUX,A
00038f e807      	LDI		A,1<<ADEN | 1<<ADPS0 | 1<<ADPS1 | 1<<ADPS2
000390 b906      	OUT		ADCSRA,A
                  .include	"clock.inc"
000391 9508      
                  * clock.inc
                  *
                  *  Created: 5/20/2013 12:35:03 AM
                  *   Author: Hamid Reza Mehrabian
                  */ 
                  Timer1_OVF:
000392 930f      	PUSH	A
000393 931f      	PUSH	B
000394 932f      	PUSH	C
000395 ef07      	LDI		A,0xF7
000396 ec12      	LDI		B,0xC2
000397 bd0c      	OUT		TCNT1L,A
000398 bd1d      	OUT		TCNT1H,B
000399 9100 00a8 	LDS		A,Second
00039b 330b      	CPI		A,59
00039c f549      	BRNE	SNOF
00039d 9110 00a9 	LDS		B,Minute
00039f 331b      	CPI		B,59
0003a0 f4d9      	BRNE	MNOF
0003a1 9120 00aa 	LDS		C,Hour
0003a3 3127      	CPI		C,23
0003a4 f459      	BRNE	HNOF
0003a5 e020      	LDI		C,0
0003a6 9320 00aa 	STS		Hour,C
0003a8 9320 00a9 	STS		Minute,C
0003aa 9320 00a8 	STS		Second,C
0003ac 912f      	POP		C
0003ad 911f      	POP		B
0003ae 910f      	POP		A
0003af 9518      	RETI
                 HNOF:
0003b0 e000      	LDI		A,0
0003b1 9300 00a9 	STS		Minute,A
0003b3 9300 00a8 	STS		Second,A
0003b5 9523      	INC		C
0003b6 9320 00aa 	STS		Hour,C
0003b8 912f      	POP		C
0003b9 911f      	POP		B
0003ba 910f      	POP		A
0003bb 9518      	RETI
                 MNOF:
0003bc e000      	LDI		A,0
0003bd 9300 00a8 	STS		Second,A
0003bf 9513      	INC		B
0003c0 9310 00a9 	STS		Minute,B
0003c2 912f      	POP		C
0003c3 911f      	POP		B
0003c4 910f      	POP		A
0003c5 9518      	RETI
                 SNOF:
0003c6 9503      	INC		A
0003c7 9300 00a8 	STS		Second,A
0003c9 912f      	POP		C
0003ca 911f      	POP		B
0003cb 910f      	POP		A
                  .include	"serial.inc"
0003cc 9518      
                  * serial.inc
                  *
                  *  Created: 5/20/2013 12:56:45 AM
                  *   Author: Omran Rezaee
                  */ 
                 
                  USART_Init:
0003cd e806       	LDI		A,1<<2 | 1<<1 | 1<<7
0003ce bd00      	OUT		UCSRC,A
0003cf e108      	LDI		A,0x18
0003d0 b90a      	OUT		UCSRB,A
0003d1 e000        	LDI		A,HIGH(UBRR)
0003d2 bd00      	OUT		UBRRH,A
0003d3 e607        	LDI		A,LOW(UBRR)
0003d4 b909      	OUT		UBRRL,A
0003d5 9508      RET
                 
                 
                 USART_Recive:
0003d6 b11b      	IN		B,UCSRA
0003d7 7810      	ANDI	B,1<<7
0003d8 f3e9      	BREQ	USART_Recive
0003d9 b10c      	IN		A,UDR
0003da 9508      RET
                 
                 USART_Send:
0003db b11b      	IN		B,UCSRA
0003dc 7210      	ANDI	B,1<<5
0003dd f3e9      	BREQ	USART_Send
0003de b90c      	OUT		UDR,A
0003df 9508      RET
                 
                 USART_Scan:
0003e0 940e 03d6 	CALL	USART_Recive
0003e2 300d      	CPI		A,0x0D
0003e3 f021      	BREQ	EndScan
0003e4 930d      	ST		X+,A
0003e5 940e 03db 	CALL	USART_Send
0003e7 cff8      	RJMP	USART_Scan
                 EndScan:
0003e8 e000      	LDI		A,0
0003e9 930d      	ST		X+,A
0003ea 9508      RET
                 
                 USART_Print:
0003eb 910d      	LD		A,X+
0003ec 3000      	CPI		A,0
0003ed f019      	BREQ	EndPrint
0003ee 940e 03db 	CALL	USART_Send
0003f0 cffa      	RJMP	USART_Print
                 EndPrint:
0003f1 9508      RET
                 
                 USART_Printf:
0003f2 9105      	LPM		A,Z+
0003f3 3000      	CPI		A,0
0003f4 f019      	BREQ	EndPrintf
0003f5 940e 03db 	CALL	USART_Send
0003f7 cffa      	RJMP	USART_Printf
                 EndPrintf:
                  .include	"kernel.asm"
0003f8 9508      
                  * kernel.asm
                  *
                  *  Created: 5/22/2013 7:44:10 AM
                  *   Author: Hamid
                  */
                  SKernel:
0003f9 940e 0348 	CALL	LCD_CLS
0003fb eaaf      	LDI		XL,LOW(RAMS)
0003fc e0b0      	LDI		XH,HIGH(RAMS)
0003fd 940e 0164 	CALL	LCD_PUTS
0003ff e800      	ldi		a,0x80
000400 bb0b      	out		porta,a
                  Kernel:
000401 932f
000402 933f
000403 930f
000404 ef2f
000405 ef3f
000406 3030
000407 f409
000408 9533
000409 2f03
00040a 952a
00040b 2f30
00040c 953a
00040d 0000
00040e 0000
00040f 0000
000410 0000
000411 0000
000412 f7c9
000413 2322
000414 f7a9
000415 910f
000416 913f
000417 912f      	LDELAY	0xFFFF
000418 940e 03d6 	CALL	USART_Recive
00041a 940e 03db 	CALL	USART_Send
00041c 3401      	CPI		A,'A'
00041d f509      	BRNE	C2
00041e 940e 03d6 	CALL	USART_Recive
000420 940e 03db 	CALL	USART_Send
000422 2f20      	MOV		C,A
000423 940e 05bc 	CALL	PrintResultLayout
000425 5320      	SUBI	C,'0'
000426 e002      	LDI		A,ADC_LOCK
000427 940e 0079 	CALL	SetLock
000429 2f02      	MOV		A,C
00042a 940e 038c 	CALL	InitADC
00042c 940e 0371 	CALL	GetADC
00042e e002      	LDI		A,ADC_LOCK
00042f 940e 0081 	CALL	SetUnlock
000431 b104      	IN		A,ADCL
000432 b115      	IN		B,ADCH
000433 eaaf      	LDI		XL,LOW(RAMS)
000434 e0b0      	LDI		XH,HIGH(RAMS)
000435 940e 0047 	CALL	itoa
000437 eaaf      	LDI		XL,LOW(RAMS)
000438 e0b0      	LDI		XH,HIGH(RAMS)
000439 940e 03eb 	CALL	USART_Print
00043b e00d      	LDI		A,0xD
00043c 940e 03db 	CALL	USART_Send
00043e cfc2      	RJMP	Kernel
                 
                 C2:
00043f 3502      	CPI		A,'R'
000440 f009      	BREQ	NC3
000441 c072      	RJMP	C3
                 NC3:
000442 940e 03d6 	CALL	USART_Recive
000444 940e 03db 	CALL	USART_Send
000446 2f20      	MOV		C,A
000447 940e 05bc 	CALL	PrintResultLayout
000449 2f02      	MOV		A,C
00044a 94f8      	CLI
00044b 3301      	CPI		A,'1'
00044c f059      	BREQ	RT1
00044d 3302      	CPI		A,'2'
00044e f101      	BREQ	RT2
00044f 3303      	CPI		A,'3'
000450 f1a9      	BREQ	RT3
000451 3304      	CPI		A,'4'
000452 f409      	BRNE	NRT4
000453 c049      	RJMP	RT4
                 NRT4:
000454 9478      	SEI
000455 940e 05df 	CALL	Error
000457 cfa9      	RJMP	Kernel
                 RT1:
000458 9100 00ae 	LDS		A,Process
00045a 7001      	ANDI	A,1
00045b f021      	BREQ	CRT1
00045c 940e 05df 	CALL	Error
00045e 9478      	SEI
00045f cfa1      	RJMP	Kernel	
                 CRT1:
000460 efea      	LDI		ZL,LOW(app1)
000461 e0f5      	LDI		ZH,HIGH(app1)
000462 e012      	LDI		B,2
000463 940e 00d3 	CALL	InitProc
000465 940e 05cf 	CALL	Done
000467 e011      	LDI		B,1
000468 9100 00ae 	LDS		A,Process
00046a 2b01      	OR		A,B
00046b 9300 00ae 	STS		Process,A
00046d 9478      	SEI
00046e cf92      	RJMP	Kernel
                 RT2:
00046f 9100 00ae 	LDS		A,Process
000471 7002      	ANDI	A,2
000472 f021      	BREQ	CRT2
000473 940e 05df 	CALL	Error
000475 9478      	SEI
000476 cf8a      	RJMP	Kernel	
                 CRT2:
000477 e3ea      	LDI		ZL,LOW(app2)
000478 e0f6      	LDI		ZH,HIGH(app2)
000479 e013      	LDI		B,3
00047a 940e 00d3 	CALL	InitProc
00047c 940e 05cf 	CALL	Done
00047e e012      	LDI		B,2
00047f 9100 00ae 	LDS		A,Process
000481 2b01      	OR		A,B
000482 9300 00ae 	STS		Process,A
000484 9478      	SEI
000485 cf7b      	RJMP	Kernel
                 RT3:
000486 9100 00ae 	LDS		A,Process
000488 7004      	ANDI	A,4
000489 f021      	BREQ	CRT3
00048a 940e 05df 	CALL	Error
00048c 9478      	SEI
00048d cf73      	RJMP	Kernel	
                 CRT3:
00048e e6e2      	LDI		ZL,LOW(app3)
00048f e0f6      	LDI		ZH,HIGH(app3)
000490 e014      	LDI		B,4
000491 940e 00d3 	CALL	InitProc
000493 940e 05cf 	CALL	Done
000495 e014      	LDI		B,4
000496 9100 00ae 	LDS		A,Process
000498 2b01      	OR		A,B
000499 9300 00ae 	STS		Process,A
00049b 9478      	SEI
00049c cf64      	RJMP	Kernel
                 RT4:
00049d 9100 00ae 	LDS		A,Process
00049f 7008      	ANDI	A,8
0004a0 f021      	BREQ	CRT4
0004a1 940e 05df 	CALL	Error
0004a3 9478      	SEI
0004a4 cf5c      	RJMP	Kernel	
                 CRT4:
0004a5 e9ec      	LDI		ZL,LOW(app4)
0004a6 e0f6      	LDI		ZH,HIGH(app4)
0004a7 e015      	LDI		B,5
0004a8 940e 00d3 	CALL	InitProc
0004aa 940e 05cf 	CALL	Done
0004ac e018      	LDI		B,8
0004ad 9100 00ae 	LDS		A,Process
0004af 2b01      	OR		A,B
0004b0 9300 00ae 	STS		Process,A
0004b2 9478      	SEI
0004b3 cf4d      	RJMP	Kernel
                 
                 C3:
0004b4 340b      	CPI		A,'K'
0004b5 f009      	BREQ	NC4
0004b6 c05b      	RJMP	C4
                 NC4:
0004b7 940e 03d6 	CALL	USART_Recive
0004b9 940e 03db 	CALL	USART_Send
0004bb 2f20      	MOV		C,A
0004bc 940e 05bc 	CALL	PrintResultLayout
0004be 2f02      	MOV		A,C
0004bf 3301      	CPI		A,'1'
0004c0 f049      	BREQ	KT1
0004c1 3302      	CPI		A,'2'
0004c2 f0c9      	BREQ	KT2
0004c3 3303      	CPI		A,'3'
0004c4 f149      	BREQ	KT3
0004c5 3304      	CPI		A,'4'
0004c6 f1c9      	BREQ	KT4
0004c7 940e 05df 	CALL	Error
0004c9 cf37      	RJMP	Kernel
                 KT1:
0004ca 9100 00ae 	LDS		A,Process
0004cc 7001      	ANDI	A,1
0004cd f419      	BRNE	CKT1
0004ce 940e 05df 	CALL	Error
0004d0 cf30      	RJMP	Kernel
                 CKT1:
0004d1 e002      	LDI		A,2
0004d2 940e 00af 	CALL	KillProc
0004d4 940e 05cf 	CALL	Done
0004d6 9100 00ae 	LDS		A,Process
0004d8 7f0e      	ANDI	A,0xFE
0004d9 9300 00ae 	STS		Process,A
0004db cf25      	RJMP	Kernel
                 KT2:
0004dc 9100 00ae 	LDS		A,Process
0004de 7002      	ANDI	A,2
0004df f419      	BRNE	CKT2
0004e0 940e 05df 	CALL	Error
0004e2 cf1e      	RJMP	Kernel
                 CKT2:
0004e3 e003      	LDI		A,3
0004e4 940e 00af 	CALL	KillProc
0004e6 940e 05cf 	CALL	Done
0004e8 9100 00ae 	LDS		A,Process
0004ea 7f0d      	ANDI	A,0xFD
0004eb 9300 00ae 	STS		Process,A
0004ed cf13      	RJMP	Kernel
                 KT3:
0004ee 9100 00ae 	LDS		A,Process
0004f0 7004      	ANDI	A,4
0004f1 f419      	BRNE	CKT3
0004f2 940e 05df 	CALL	Error
0004f4 cf0c      	RJMP	Kernel
                 CKT3:
0004f5 e004      	LDI		A,4
0004f6 940e 00af 	CALL	KillProc
0004f8 940e 05cf 	CALL	Done
0004fa 9100 00ae 	LDS		A,Process
0004fc 7f0b      	ANDI	A,0xFB
0004fd 9300 00ae 	STS		Process,A
0004ff cf01      	RJMP	Kernel
                 KT4:
000500 9100 00ae 	LDS		A,Process
000502 7008      	ANDI	A,8
000503 f419      	BRNE	CKT4
000504 940e 05df 	CALL	Error
000506 cefa      	RJMP	Kernel
                 CKT4:
000507 e005      	LDI		A,5
000508 940e 00af 	CALL	KillProc
00050a 940e 05cf 	CALL	Done
00050c 9100 00ae 	LDS		A,Process
00050e 7f07      	ANDI	A,0xF7
00050f 9300 00ae 	STS		Process,A
000511 ceef      	RJMP	Kernel
                 
                 C4:
000512 3500      	CPI		A,'P'
000513 f489      	BRNE	C5
000514 940e 05bc 	CALL	PrintResultLayout
000516 e010      	LDI		B,0
000517 9100 0065 	LDS		A,ProcCount
000519 eaaf      	LDI		XL,LOW(RAMS)
00051a e0b0      	LDI		XH,HIGH(RAMS)	
00051b 940e 0047 	CALL	itoa
00051d eaaf      	LDI		XL,LOW(RAMS)
00051e e0b0      	LDI		XH,HIGH(RAMS)
00051f 940e 03eb 	CALL	USART_Print
000521 e00d      	LDI		A,0xD
000522 940e 03db 	CALL	USART_Send
000524 cedc      	RJMP	Kernel
                 C5:
000525 3503      	CPI		A,'S'
000526 f489      	BRNE	C6
000527 940e 05bc 	CALL	PrintResultLayout
000529 e010      	LDI		B,0
00052a 9100 00a8 	LDS		A,Second
00052c eaaf      	LDI		XL,LOW(RAMS)
00052d e0b0      	LDI		XH,HIGH(RAMS)	
00052e 940e 0047 	CALL	itoa
000530 eaaf      	LDI		XL,LOW(RAMS)
000531 e0b0      	LDI		XH,HIGH(RAMS)
000532 940e 03eb 	CALL	USART_Print
000534 e00d      	LDI		A,0xD
000535 940e 03db 	CALL	USART_Send
000537 cec9      	RJMP	Kernel
                 C6:
000538 340d      	CPI		A,'M'
000539 f489      	BRNE	C7
00053a 940e 05bc 	CALL	PrintResultLayout
00053c e010      	LDI		B,0
00053d 9100 00a9 	LDS		A,Minute
00053f eaaf      	LDI		XL,LOW(RAMS)
000540 e0b0      	LDI		XH,HIGH(RAMS)	
000541 940e 0047 	CALL	itoa
000543 eaaf      	LDI		XL,LOW(RAMS)
000544 e0b0      	LDI		XH,HIGH(RAMS)
000545 940e 03eb 	CALL	USART_Print
000547 e00d      	LDI		A,0xD
000548 940e 03db 	CALL	USART_Send
00054a ceb6      	RJMP	Kernel
                 C7:
00054b 3408      	CPI		A,'H'
00054c f489      	BRNE	C8
00054d 940e 05bc 	CALL	PrintResultLayout
00054f e010      	LDI		B,0
000550 9100 00aa 	LDS		A,Hour
000552 eaaf      	LDI		XL,LOW(RAMS)
000553 e0b0      	LDI		XH,HIGH(RAMS)	
000554 940e 0047 	CALL	itoa
000556 eaaf      	LDI		XL,LOW(RAMS)
000557 e0b0      	LDI		XH,HIGH(RAMS)
000558 940e 03eb 	CALL	USART_Print
00055a e00d      	LDI		A,0xD
00055b 940e 03db 	CALL	USART_Send
00055d cea3      	RJMP	Kernel
                 C8:
00055e 340f      	CPI		A,'O'
00055f f551      	BRNE	C9
000560 940e 03d6 	CALL	USART_Recive
000562 940e 03db 	CALL	USART_Send
000564 2f20      	MOV		C,A
000565 940e 05bc 	CALL	PrintResultLayout
000567 2f02      	MOV		A,C
000568 e010      	LDI		B,0
000569 3401      	CPI		A,'A'
00056a f029      	BREQ	OAO
00056b 3402      	CPI		A,'B'
00056c f081      	BREQ	OBO
00056d 940e 05df 	CALL	Error
00056f ce91      	RJMP	Kernel
                 OAO:
000570 b30b      	IN		A,PORTA
000571 eaaf      	LDI		XL,LOW(RAMS)
000572 e0b0      	LDI		XH,HIGH(RAMS)	
000573 940e 0047 	CALL	itoa
000575 eaaf      	LDI		XL,LOW(RAMS)
000576 e0b0      	LDI		XH,HIGH(RAMS)
000577 940e 03eb 	CALL	USART_Print
000579 e00d      	LDI		A,0xD
00057a 940e 03db 	CALL	USART_Send
00057c ce84      	RJMP	Kernel
                 OBO:
00057d b308      	IN		A,PORTB
00057e eaaf      	LDI		XL,LOW(RAMS)
00057f e0b0      	LDI		XH,HIGH(RAMS)	
000580 940e 0047 	CALL	itoa
000582 eaaf      	LDI		XL,LOW(RAMS)
000583 e0b0      	LDI		XH,HIGH(RAMS)
000584 940e 03eb 	CALL	USART_Print
000586 e00d      	LDI		A,0xD
000587 940e 03db 	CALL	USART_Send
000589 ce77      	RJMP	Kernel
                 C9:
00058a 3409      	CPI		A,'I'
00058b f551      	BRNE	C10
00058c 940e 03d6 	CALL	USART_Recive
00058e 940e 03db 	CALL	USART_Send
000590 2f20      	MOV		C,A
000591 940e 05bc 	CALL	PrintResultLayout
000593 2f02      	MOV		A,C
000594 e010      	LDI		B,0
000595 3401      	CPI		A,'A'
000596 f029      	BREQ	OAI
000597 3402      	CPI		A,'B'
000598 f081      	BREQ	OBI
000599 940e 05df 	CALL	Error
00059b ce65      	RJMP	Kernel
                 OAI:
00059c b309      	IN		A,PINA
00059d eaaf      	LDI		XL,LOW(RAMS)
00059e e0b0      	LDI		XH,HIGH(RAMS)	
00059f 940e 0047 	CALL	itoa
0005a1 eaaf      	LDI		XL,LOW(RAMS)
0005a2 e0b0      	LDI		XH,HIGH(RAMS)
0005a3 940e 03eb 	CALL	USART_Print
0005a5 e00d      	LDI		A,0xD
0005a6 940e 03db 	CALL	USART_Send
0005a8 ce58      	RJMP	Kernel
                 OBI:
0005a9 b306      	IN		A,PINB
0005aa eaaf      	LDI		XL,LOW(RAMS)
0005ab e0b0      	LDI		XH,HIGH(RAMS)	
0005ac 940e 0047 	CALL	itoa
0005ae eaaf      	LDI		XL,LOW(RAMS)
0005af e0b0      	LDI		XH,HIGH(RAMS)
0005b0 940e 03eb 	CALL	USART_Print
0005b2 e00d      	LDI		A,0xD
0005b3 940e 03db 	CALL	USART_Send
0005b5 ce4b      	RJMP	Kernel
                 C10:
0005b6 e00d      	LDI		A,0xD
0005b7 940e 03db 	CALL	USART_Send
0005b9 940e 05df 	CALL	Error
0005bb ce45      RJMP	Kernel
                 
                 
                 PrintResultLayout:
0005bc e00d      	LDI		A,0xD
0005bd 940e 03db 	CALL	USART_Send
0005bf e200      	LDI		A,' '
0005c0 940e 03db 	CALL	USART_Send
0005c2 940e 03db 	CALL	USART_Send
0005c4 940e 03db 	CALL	USART_Send
0005c6 940e 03db 	CALL	USART_Send
0005c8 e30d      	LDI		A,'='
0005c9 940e 03db 	CALL	USART_Send
0005cb e200      	LDI		A,' '
0005cc 940e 03db 	CALL	USART_Send
0005ce 9508      RET
                 
                 Done:
0005cf e404      	LDI		A,'D'
0005d0 940e 03db 	CALL	USART_Send
0005d2 e60f      	LDI		A,'o'
0005d3 940e 03db 	CALL	USART_Send
0005d5 e60e      	LDI		A,'n'
0005d6 940e 03db 	CALL	USART_Send
0005d8 e605      	LDI		A,'e'
0005d9 940e 03db 	CALL	USART_Send
0005db e00d      	LDI		A,0xD
0005dc 940e 03db 	CALL	USART_Send
0005de 9508      RET
                 
                 Error:
0005df e405      	LDI		A,'E'
0005e0 940e 03db 	CALL	USART_Send
0005e2 e702      	LDI		A,'r'
0005e3 940e 03db 	CALL	USART_Send
0005e5 e702      	LDI		A,'r'
0005e6 940e 03db 	CALL	USART_Send
0005e8 e60f      	LDI		A,'o'
0005e9 940e 03db 	CALL	USART_Send
0005eb e702      	LDI		A,'r'
0005ec 940e 03db 	CALL	USART_Send
0005ee e201      	LDI		A,'!'
0005ef 940e 03db 	CALL	USART_Send
0005f1 e00d      	LDI		A,0xD
0005f2 940e 03db 	CALL	USART_Send
                  .include	"pwm.inc"
0005f4 9508      
                  * pwm.inc
                  *
                  *  Created: 5/23/2013 8:43:29 AM
                  *   Author: Hamid
                  */ 
                 
                 
                  pwminit:
0005f5 e706      	LDI		A,(1<<WGM20) | (1<<COM20) | (1<<COM21) | (1<<CS21) | (1<<CS22)
0005f6 bd05      	OUT		TCCR2,A
0005f7 9508       RET
                 
                 
                  pwmset:
0005f8 bd03      	OUT		OCR2,A
                  .include	"app1.asm"
0005f9 9508      
                  * app1.asm
                  *  Beep
                  *  Created: 5/22/2013 7:44:35 AM
                  *   Author: Hamid
                  */ 
                  app1:
0005fa b307       IN		A,DDRB
0005fb 6001       ORI	A,1
0005fc e820       LDI	C,0x80
0005fd e030       LDI	D,0
0005fe bb07       OUT	DDRB,A
                  LOOP1:
0005ff 9ac0       SBI	PORTB,0
000600 932f
000601 933f
000602 930f
000603 e020
000604 e031
000605 3030
000606 f409
000607 9533
000608 2f03
000609 952a
00060a 2f30
00060b 953a
00060c 0000
00060d 0000
00060e 0000
00060f 0000
000610 0000
000611 f7c9
000612 2322
000613 f7a9
000614 910f
000615 913f
000616 912f       LDELAY	0x100
000617 98c0       CBI	PORTB,0
000618 932f
000619 933f
00061a 930f
00061b e020
00061c e031
00061d 3030
00061e f409
00061f 9533
000620 2f03
000621 952a
000622 2f30
000623 953a
000624 0000
000625 0000
000626 0000
000627 0000
000628 0000
000629 f7c9
00062a 2322
00062b f7a9
00062c 910f
00062d 913f
00062e 912f       LDELAY	0x100
00062f 9513       INC	B
000630 3f1f       CPI	B,255
000631 f669       BRNE	LOOP1
000632 e010       LDI	B,0
000633 9533       INC	D
000634 3634       CPI	D,100
                  ;BRNE	LOOP1
000635 e030       LDI	D,0
000636 9520       COM	C
000637 7c20       ANDI	C,0xC0
000638 bb2b       OUT	PORTA,C
                  .include	"app2.asm"
000639 cfc5      
                  * app2.asm
                  *  Counter
                  *  Created: 5/22/2013 7:44:46 AM
                  *   Author: Hamid
                  */
                  .equ	PRESSED_TIME = RAMSA
                  app2:
00063a b307       IN		A,DDRB
00063b 6f00       ORI	A,0xF0
00063c bb07       OUT	DDRB,A
                  LOOP2:
00063d 9bb3        SBIS	PINB,3
00063e cffe        RJMP	LOOP2
                 KEY_DOWN:
00063f 99b3        SBIC	PINB,3
000640 cffe        RJMP	KEY_DOWN
000641 9611        ADIW	XL,1
000642 2f1a        MOV	B,XL
000643 701f        ANDI	B,0x0F
000644 b308        IN	A,PORTB
000645 2b01        OR	A,B
000646 0f00        LSL	A
000647 0f00        LSL	A
000648 0f00        LSL	A
000649 0f00        LSL	A
00064a bb08        OUT	PORTB,A
00064b 93af        PUSH	XL
00064c 93bf        PUSH	XH
00064d 2f0a        MOV	A,XL
00064e 2f1b        MOV	B,XH
00064f e0a0        LDI	XL,LOW(PRESSED_TIME)
000650 e0b1        LDI	XH,HIGH(PRESSED_TIME)
000651 940e 0047   CALL	itoa
000653 e0a0        LDI	XL,LOW(PRESSED_TIME)
000654 e0b1        LDI	XH,HIGH(PRESSED_TIME)
000655 e001        LDI	A,LCD_LOCK
000656 940e 0079   CALL	Setlock
000658 940e 0348   CALL	LCD_CLS
00065a 940e 0164   CALL	LCD_PUTS
00065c e001        LDI	A,LCD_LOCK
00065d 940e 0081   CALL	SetUnlock
00065f 91bf        POP	XH
000660 91af        POP	XL
                  .include	"app3.asm"
000661 cfdb      
                  * app3.asm
                  *  
                  *  Created: 5/22/2013 7:44:55 AM
                  *   Author: Hamid
                  */ 
                   .equ	TEMP = RAMSA + 6
                   app3:
000662 e050      		LDI		F,0
                 Wait1s:	
000663 9100 00a8 	LDS		A,Second
000665 1705      	CP		A,F
000666 f3e1      	BREQ	Wait1s
000667 2f50      	MOV		F,A
000668 e002      	LDI		A,ADC_LOCK
000669 940e 0079 	CALL	SetLock
00066b e000      	LDI		A,0
00066c 940e 038c 	CALL	InitADC
00066e 940e 0371 	CALL	GetADC
000670 e002      	LDI		A,ADC_LOCK
000671 940e 0081 	CALL	SetUnlock
000673 b104          IN		A,ADCL
000674 b115      	IN		B,ADCH
000675 940e 0699 	CALL	DIV2
000677 940e 0699 	CALL	DIV2
000679 e0a6      	LDI		XL,LOW(TEMP)
00067a e0b1      	LDI		XH,HIGH(TEMP)
00067b 940e 0047 	CALL	itoa
00067d e001      	LDI		A,LCD_LOCK
00067e 940e 0079 	CALL	Setlock
000680 940e 0348 	CALL	LCD_CLS
000682 e504      	LDI		A,'T'
000683 940e 036e 	CALL	LCD_PUTC
000685 e405      	LDI		A,'E'
000686 940e 036e 	CALL	LCD_PUTC
000688 e40d      	LDI		A,'M'
000689 940e 036e 	CALL	LCD_PUTC
00068b e500      	LDI		A,'P'
00068c 940e 036e 	CALL	LCD_PUTC
00068e e30a      	LDI		A,':'
00068f 940e 036e 	CALL	LCD_PUTC
000691 e0a6      	LDI		XL,LOW(TEMP)
000692 e0b1      	LDI		XH,HIGH(TEMP)
000693 940e 0164 	CALL	LCD_PUTS
000695 e001      	LDI		A,LCD_LOCK
000696 940e 0081 	CALL	SetUnlock
000698 cfca      rjmp Wait1s
                 
                 
                 DIV2:
000699 9516      	LSR		B
00069a 9507      	ROR		A
                  .include	"app4.asm"
00069b 9508      
                  * app4.asm
                  *
                  *  Created: 5/22/2013 7:45:06 AM
                  *   Author: Hamid
                  */ 
                  .equ	LIGHT = RAMSA + 12
                   app4:
00069c e800          LDI		A,1<<7
00069d bb01      	OUT		DDRD,A
00069e 940e 05f5 	CALL	pwminit
0006a0 e050      	LDI		F,0
                 KEYUP:
0006a1 9bb1        SBIS	PINB,1
0006a2 cffe        RJMP	KEYUP
                 KEYDOWN:
0006a3 99b1        SBIC	PINB,1
0006a4 cffe        RJMP	KEYDOWN
0006a5 e005        LDI	A,5
0006a6 0f50        ADD	F,A
0006a7 2f05        MOV	A,F
0006a8 940e 05f8   CALL	pwmset
0006aa 2f05        MOV	A,F
0006ab e010        LDI	B,0
0006ac e0ac        LDI	XL,LOW(LIGHT)
0006ad e0b1        LDI	XH,HIGH(LIGHT)
0006ae 940e 0047   CALL	itoa
0006b0 e0ac        LDI	XL,LOW(LIGHT)
0006b1 e0b1        LDI	XH,HIGH(LIGHT)
0006b2 e001        LDI	A,LCD_LOCK
0006b3 940e 0079   CALL	Setlock
0006b5 940e 0348   CALL	LCD_CLS
0006b7 940e 0164   CALL	LCD_PUTS
0006b9 e001        LDI	A,LCD_LOCK
0006ba 940e 0081   CALL	SetUnlock
                 
0006bc cfe4        
                  TEXT1:
0006bd 2a2a
0006be 2a2a
0006bf 412a
0006c0 5256
0006c1 4f20
0006c2 2a53
0006c3 2a2a
0006c4 2a2a
0006c5 5620
0006c6 7265
0006c7 6973
0006c8 6e6f
0006c9 2e31
0006ca 2e30
0006cb 2030
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(34): warning: .cseg .db misalignment - padding zero byte
0006cc 0000      	.DB		"*****AVR OS***** Version1.0.0 ",0
                  START_MSG:
0006cd 6548
0006ce 6c6c
0006cf 206f
0006d0 7246
0006d1 6d6f
0006d2 4d20
0006d3 6520
0006d4 6720
0006d5 6120
0006d6 3120
0006d7 3620
0006d8 2120
0006d9 2121
0006da 410d
0006db 5256
0006dc 534f
0006dd 5620
0006de 7265
0006df 6973
0006e0 6e6f
0006e1 3120
0006e2 302e
0006e3 302e
0006e4 2a0d
0006e5 2a2a
0006e6 2a2a
0006e7 2a2a
0006e8 2a2a
0006e9 2a2a
0006ea 2a2a
0006eb 2a2a
0006ec 2a2a
0006ed 2a2a
0006ee 430d
0006ef 6d6f
0006f0 6f6d
0006f1 646e
0006f2 2073
0006f3 203a
0006f4 520d
0006f5 206e
0006f6 202d
0006f7 7552
0006f8 206e
0006f9 2061
0006fa 6174
0006fb 6b73
0006fc 2820
0006fd 3d6e
0006fe 6174
0006ff 6b73
000700 6e20
000701 6d75
000702 6562
000703 2972
000704 4b0d
000705 206e
000706 202d
000707 694b
000708 6c6c
000709 6120
00070a 7420
00070b 7361
00070c 206b
00070d 6e28
00070e 743d
00070f 7361
000710 206b
000711 756e
000712 626d
000713 7265
000714 0d29
000715 2050
000716 202d
000717 6853
000718 776f
000719 7220
00071a 6e75
00071b 696e
00071c 676e
00071d 7420
00071e 7361
00071f 206b
000720 756e
000721 626d
000722 7265
000723 530d
000724 2d20
000725 5320
000726 6f68
000727 2077
000728 6553
000729 6f63
00072a 646e
00072b 4d0d
00072c 2d20
00072d 5320
00072e 6f68
00072f 2077
000730 694d
000731 756e
000732 6574
000733 480d
000734 2d20
000735 5320
000736 6f68
000737 2077
000738 6f48
000739 7275
00073a 410d
00073b 206e
00073c 202d
00073d 7250
00073e 6e69
00073f 2074
000740 4441
000741 2043
000742 6176
000743 756c
000744 2865
000745 3d6e
000746 6863
000747 6e61
000748 656e
000749 206c
00074a 756e
00074b 626d
00074c 7265
00074d 0d29
00074e 4149
00074f 2d20
000750 5020
000751 6972
000752 746e
000753 7020
000754 6e69
000755 4120
000756 7620
000757 6c61
000758 6575
000759 4f0d
00075a 2041
00075b 202d
00075c 7250
00075d 6e69
00075e 2074
00075f 6f70
000760 7472
000761 4120
000762 7620
000763 6c61
000764 6575
000765 490d
000766 2042
000767 202d
000768 7250
000769 6e69
00076a 2074
00076b 6970
00076c 206e
00076d 2042
00076e 6176
00076f 756c
000770 0d65
000771 424f
000772 2d20
000773 5020
000774 6972
000775 746e
000776 7020
000777 726f
000778 2074
000779 2042
00077a 6176
00077b 756c
00077c 0d65
E:\Programming\AVR SIMPLE OS\src\AVROS\AVROS.asm(36): warning: .cseg .db misalignment - padding zero byte
00077d 0000      	.DB		"Hello From M e g a 1 6 !!!",0xd,"AVROS Version 1.0.0",0xd,"*******************",0xd,"Commonds : ",0xd,"Rn - Run a task (n=task number)",0xd,"Kn - Kill a task (n=task number)",0xd,"P - Show running task number",0xd,"S - Show Second",0xd,"M - Show Mi                 nute",0xd,"H - Show Hour",0xd,"An - Print ADC value(n=channel number)",0xd,"IA - Print pin A value",0xd,"OA - Print port A value",0xd,"IB - Print pin B value",0xd,"OB - Print port B value",0xd,0
00077e e003      start:
00077f e11f      	LDI		A,0x3
000780 bf1d      	LDI		B,0x1F
000781 bf0e      	OUT		SPL,B
000782 ef1f      	OUT		SPH,A
000783 bb14      	LDI		B,0xFF
000784 bb1a      	out		DDRC,B
                 	OUT		DDRA,B
                 heree:
000785 e000      	;rjmp	heree
000786 bf02      	LDI		A,0
000787 e005      	OUT		TCNT0,A
000788 bf03      	LDI		A,5
000789 e100      	OUT		TCCR0,A
00078a bf02      	LDI		A,0x10
00078b e005      	OUT		TCNT0,A
00078c bd0e      	LDI		A,5
00078d ef07      	OUT		TCCR1B,A
00078e ec12      	LDI		A,0xF7
00078f bd0c      	LDI		B,0xC2
000790 bd1d      	OUT		TCNT1L,A
000791 e004      	OUT		TCNT1H,B
000792 bd05      	LDI		A,4
000793 ef0a      	OUT		TCCR2,A
000794 bd03      	LDI		A,250
000795 e005      	OUT		OCR2,A
000796 bf09      	LDI		A,(1<<TOIE0) | (1<<TOIE1)
                 	OUT		TIMSK,A
                 
                 
                 
                 ;;	Clear SRAM
000797 e6a0      
000798 e0b0      	LDI		XL,0x60
000799 e000      	LDI		XH,0x00
00079a e614      	LDI		A,0
                 	LDI		B,100
00079b 3010      CLEARING:
00079c f019      	CPI		B,0
00079d 930d      	BREQ	END_CLEARING
00079e 951a      	ST		X+,A
00079f cffb      	DEC		B
                 	RJMP	CLEARING
                 END_CLEARING:
                 
0007a0 e7ea      
0007a1 e0fd      	LDI		ZL,LOW(TEXT1<<1)
0007a2 eaaf      	LDI		ZH,HIGH(TEXT1<<1)
0007a3 e0b0      	LDI		XL,LOW(RAMS)
                 	LDI		XH,HIGH(RAMS)
0007a4 9105      COPY_MSG:
0007a5 3000      	LPM		A,Z+
0007a6 f011      	CPI		A,0
0007a7 930d      	BREQ	ENDCM
0007a8 cffb      	ST		X+,A
                 	RJMP	COPY_MSG
                 
                 
                 
0007a9 efe9      ENDCM:
0007aa e0f3      	LDI		ZL,LOW(SKernel)
0007ab e011      	LDI		ZH,HIGH(SKernel)
0007ac 940e 00d3 	LDI		B,1
                 	CALL	InitProc
0007ae 940e 0171 
0007b0 940e 03cd 	CALL	LCD_INIT
0007b2 940e 038c 	CALL	USART_Init
0007b4 e9ea      	CALL	InitADC
0007b5 e0fd      	LDI		ZL,LOW(START_MSG<<1)
0007b6 940e 03f2 	LDI		ZH,HIGH(START_MSG<<1)
                 	CALL	USART_Printf
0007b8 9478      	;CALL	LCD_INIT


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 418 r17: 124 r18: 154 r19: 193 r20:   9 r21:  11 r22:  10 r23:   4 
r24:   4 r25:  14 r26:  49 r27:  47 r28:  10 r29:   7 r30:  16 r31:  16 
x  :  54 y  :   0 z  :   3 
Registers used: 20 out of 35 (57.1%)

ATmega32 instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :   8 adiw  :   1 and   :   2 
andi  :  26 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  37 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  87 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 150 cbi   :  21 cbr   :   0 
clc   :   3 clh   :   0 cli   :   3 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   4 cpc   :   0 
cpi   :  68 cpse  :   0 dec   :  45 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   1 in    :  21 inc   :  35 jmp   :   7 
ld    :  22 ldd   :   0 ldi   : 266 lds   :  30 lpm   :   3 lsl   :   4 
lsr   :   1 mov   :  90 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   : 100 or    :   8 ori   :   6 out   :  46 pop   : 101 
push  :  91 rcall :  23 ret   :  42 reti  :   4 rjmp  :  55 rol   :   0 
ror   :   1 sbc   :   0 sbci  :   0 sbi   :  10 sbic  :   2 sbis  :   2 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   3 seh   :   0 
sei   :  12 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  32 std   :   0 sts   :  22 
sub   :   0 subi  :   1 swap  :   2 tst   :  24 wdr   :   0 
Instructions used: 49 out of 113 (43.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f76   3488    386   3874   32768  11.8%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
